@page "/category/register/{id:int?}"
@using app.Data
@using Microsoft.EntityFrameworkCore
@using app.Models
@inject AppDbContext Db
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public int? Id { get; set; }
    private CategoriesRegisterModel model = new();
    private List<int> subcategoriesIdsBeingUsed = new();
    private string PageTitle => Id.HasValue ? "Editar Categoria" : "Nova Categoria";

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var category = await Db.Categories.Include(c => c.SubCategories).SingleOrDefaultAsync(c => c.Id.Equals(Id.Value));
            if (category is not null)
            {
                model = category.ToModel();
                subcategoriesIdsBeingUsed = Db.FinancialTransactions.Where(t => t.Category.Id.Equals(Id.Value)).Select(t =>
                t.SubCategory.Id).Distinct().ToList();
            }
            else
            {
                NavigationManager.NavigateTo("/categories");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Id.HasValue)
        {
            var category = await Db.Categories.Include(c => c.SubCategories).SingleAsync(c => c.Id.Equals(Id.Value));
            category.UpdateFromModel(model, subcategoriesIdsBeingUsed);
            Db.Categories.Update(category);
        }
        else
        {
            var category = model.ToEntity();
            Db.Categories.Add(category);
        }

        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo("/categories");
    }

    private async Task DeleteCategory()
    {
        var category = await Db.Categories.Include(c => c.SubCategories).SingleAsync(c => c.Id.Equals(Id!.Value));

        var existsTransactions = await Db.FinancialTransactions.AnyAsync(t => t.Category.Id.Equals(category.Id));
        if (existsTransactions)
        {
            var message = "Não é possível excluir a categoria pois existem transações associadas a ela.";
            await JSRuntime.InvokeVoidAsync("alert", message);
            return;
        }

        Db.Categories.Remove(category);
        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo("/categories");
    }
}

<PageTitle>@PageTitle</PageTitle>

<h1 class="text-left my-4">@PageTitle</h1>

<EditForm Model="model" OnValidSubmit="HandleValidSubmit" class="container mb-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-lg-6 col-md-8 col-12">
            <label for="name" class="form-label">Nome</label>
            <InputText id="name" class="form-control" @bind-Value="model.Name" />
            <ValidationMessage For="@(() => model.Name)" class="text-danger" />
        </div>
        <div class="col-12">
            <label for="description" class="form-label">Descrição</label>
            <InputTextArea id="description" class="form-control" @bind-Value="model.Description" />
            <ValidationMessage For="@(() => model.Description)" class="text-danger" />
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center my-4">
        <h2>Sub-categorias</h2>
        <button type="button" class="btn btn-secondary" @onclick="() => model.AddEmptySubcategory()">
            Adicionar
        </button>
    </div>

    @foreach (var subcategory in model.Subcategories)
    {
        <div class="row mb-3">
            <div class="col-lg-8 col-6">
                <label for="@subcategory.Key" class="form-label">Nome</label>
                <InputText id="@subcategory.Key" class="form-control" @bind-Value="subcategory.Name" />
                <ValidationMessage For="@(() => subcategory.Name)" class="text-danger" />
            </div>
            <div class="col-lg-3 col-4">
                <label class="form-label">Tipo</label>
                <InputSelect class="form-select" @bind-Value="subcategory.UsedForRevenue">
                    <option value="true">Receita</option>
                    <option value="false">Despesa</option>
                </InputSelect>
                <ValidationMessage For="@(() => subcategory.UsedForRevenue)" class="text-danger" />
            </div>
            <div class="col-lg-1 col-2 d-flex align-items-end">
                <button type="button" class="btn btn-danger" @onclick="() => model.Subcategories.Remove(subcategory)"
                    disabled="@(subcategory.Id.HasValue && subcategoriesIdsBeingUsed.Contains(subcategory.Id.Value))">
                    Remover
                </button>
            </div>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center my-4">
        @if (Id.HasValue)
        {
            <button type="button" class="btn btn-danger" @onclick="DeleteCategory">
                Excluir
            </button>
        }
        <button type="submit" class="btn btn-primary">
            Salvar
        </button>
    </div>
</EditForm>
