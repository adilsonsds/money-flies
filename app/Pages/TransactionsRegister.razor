@page "/transactions/register/{id:int?}"
@using Microsoft.AspNetCore.WebUtilities
@using app.Data
@using Microsoft.EntityFrameworkCore
@using app.Models
@inject AppDbContext Db
@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public int? Id { get; set; }
    private int? copyById;
    private TransactionsRegisterModel model = new();
    private string PageTitle => Id.HasValue ? "Editar transação" : "Nova transação";
    private string PageToReturn => "/transactions";
    private IEnumerable<Tag> tags = Array.Empty<Tag>();

    protected override async Task OnInitializedAsync()
    {
        tags = await Db.Tags.Include(tv => tv.Values).ToListAsync();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("copyBy", out var copyByValue))
        {
            copyById = int.TryParse(copyByValue, out var copyBy) ? copyBy : (int?)null;
        }

        var transactionIdToLoad = Id ?? copyById;

        if (transactionIdToLoad.HasValue)
        {
            var entity = await Db.FinancialTransactions
            .Include(f => f.Payments)
            .Include(f => f.Tags).ThenInclude(p => p.TagValue)
            .SingleOrDefaultAsync(c => c.Id.Equals(transactionIdToLoad.Value));

            if (entity is not null)
            {
                model = entity.ToModel();

                if (copyById.HasValue)
                {
                    Id = null;
                    model.Payments.ForEach(p => p.Id = null);
                }
            }
            else
            {
                NavigationManager.NavigateTo(PageToReturn);
            }
        }
        else
        {
            model.AddEmptyPayment();
        }
    }

    private async Task HandleValidSubmit()
    {
        var allTagValues = tags.SelectMany(t => t.Values).ToList();

        if (Id.HasValue)
        {
            var entity = await Db.FinancialTransactions.SingleAsync(c => c.Id.Equals(Id.Value));
            entity.UpdateFromModel(model, allTagValues);
            Db.FinancialTransactions.Update(entity);
        }
        else
        {
            var entity = model.ToEntity(allTagValues);
            Db.FinancialTransactions.Add(entity);
        }

        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo(PageToReturn);
    }

    private async Task DeleteEntity()
    {
        var entity = await Db.FinancialTransactions.SingleAsync(c => c.Id.Equals(Id!.Value));

        Db.FinancialTransactions.Remove(entity);
        await Db.SaveChangesAsync();

        NavigationManager.NavigateTo(PageToReturn);
    }

    private void UpdateSelectedTags(ChangeEventArgs e, IEnumerable<TagValue> tagValues)
    {
        int.TryParse(e.Value?.ToString(), out var selectedValue);

        if (selectedValue == 0) return;

        model.TagValueIds.RemoveAll(id => tagValues.Any(tv => tv.Id == id));
        model.TagValueIds.Add(selectedValue);
    }
}

<PageTitle>@PageTitle</PageTitle>

<h1 class="text-left my-4">@PageTitle</h1>

<EditForm Model="model" OnValidSubmit="HandleValidSubmit" class="container mb-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="tr-name">Nome</label>
        <InputText id="tr-name" class="form-control" @bind-Value="model.Name" />
    </div>

    <div class="form-group">
        <label for="date">Data</label>
        <InputDate id="date" class="form-control" @bind-Value="model.Date" />
    </div>

    <div class="row mb-3">
        <div class="col-8">
            <h2 class="text-left my-4">Pagamentos</h2>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th style="width: 5%;">#</th>
                <th style="width: 20%;">Data</th>
                <th style="width: 30%;">Observação</th>
                <th style="width: 15%;">Status</th>
                <th style="width: 20%;">Valor</th>
                <th style="width: 10%;">Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in model.Payments)
            {
                <tr>
                    <td>
                        <strong>@(model.Payments.IndexOf(item) + 1)</strong>
                    </td>
                    <td>
                        <InputDate class="form-control" @bind-Value="item.Date" />
                        <ValidationMessage For="@(() => item.Date)" class="text-danger" />
                    </td>
                    <td>
                        <InputText class="form-control" @bind-Value="item.Observation" />
                        <ValidationMessage For="@(() => item.Observation)" class="text-danger" />
                    </td>
                    <td>
                        <InputSelect class="form-control" @bind-Value="item.Paid">
                            <option value="false">Pendente</option>
                            <option value="true">Pago</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => item.Paid)" class="text-danger" />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value="item.Value" />
                        <ValidationMessage For="@(() => item.Value)" class="text-danger" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => model.Payments.Remove(item)">
                            Remover
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5">
                    <div class="d-flex justify-content-end">
                        <span>Total:</span>
                        <strong>@model.Payments.Sum(p => p.Value)</strong>
                    </div>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="() => model.AddEmptyPayment()">
                        Adicionar
                    </button>
                </td>
            </tr>
        </tfoot>
    </table>

    <h2 class="text-left my-4">Tags</h2>

    @foreach (var tag in tags)
    {
        <div class="form-group">
            <label for="tags">@tag.Name</label>
            <select id="tags" class="form-control" @onchange="(e) => UpdateSelectedTags(e, tag.Values)">
                <option value="0">Selecione...</option>
                @foreach (var tagValue in tag.Values.OrderBy(tv => tv.Value).ToList())
                {
                    <option value="@tagValue.Id" selected="@model.TagValueIds.Contains(tagValue.Id)">@tagValue.Value</option>
                }
            </select>
        </div>
    }

    <div class="d-flex justify-content-between align-items-center my-4">
        @if (Id.HasValue)
        {
            <button type="button" class="btn btn-danger" @onclick="DeleteEntity">
                Excluir
            </button>
        }
        <button type="submit" class="btn btn-primary">
            Salvar
        </button>
    </div>
</EditForm>