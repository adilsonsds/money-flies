@page "/transactions/register/{id:int?}"
@using Microsoft.AspNetCore.WebUtilities
@using app.Data
@using Microsoft.EntityFrameworkCore
@using app.Models
@inject AppDbContext Db
@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public int? Id { get; set; }
    private int? copyById;
    private string PageTitle => Id.HasValue ? "Editar transação" : "Nova transação";
    private string PageToReturn => "/transactions";
    private Profile Profile;
    private BatchModel Model = new();
    private IEnumerable<Tag> Tags = Array.Empty<Tag>();

    protected override async Task OnInitializedAsync()
    {
        Profile = await Db.Profiles.FirstAsync();
        Tags = await Db.Tags.Include(tv => tv.Values).ToListAsync();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("copyBy", out var copyByValue))
        {
            copyById = int.TryParse(copyByValue, out var copyBy) ? copyBy : (int?)null;
        }

        var transactionIdToLoad = Id ?? copyById;

        if (transactionIdToLoad.HasValue)
        {
            var batch = await Db.FinancialTransactions
            .Where(c => c.Id.Equals(transactionIdToLoad.Value) && c.Batch.Profile.Id == Profile.Id)
            .Select(c => c.Batch)
            .FirstOrDefaultAsync();

            if (batch is not null)
            {
                Model.Id = batch.Id;
                Model.Name = batch.Name;
                Model.Transactions = [];

                var transactions = await Db.FinancialTransactions
                .Where(t => t.Batch.Id == batch.Id)
                .ToListAsync();

                foreach (var transaction in transactions)
                {
                    TransactionModel transactionModel = new()
                    {
                        Id = transaction.Id,
                        IssueDate = transaction.IssueDate,
                        DueDate = transaction.DueDate,
                        PaymentDate = transaction.PaymentDate,
                        Observation = transaction.Observation,
                        Value = transaction.Value,
                        IsEntry = transaction.IsEntry,
                        Status = (int)transaction.Status
                    };

                    Model.Transactions.Add(transactionModel);

                    var tags = await Db.FinancialTransactionTags
                    .Where(t => t.FinancialTransaction.Id == transaction.Id)
                    .Include(t => t.TagValue).ThenInclude(t => t.Tag)
                    .ToListAsync();

                    foreach (var tag in tags)
                    {
                        transactionModel.Tags.Add(new TagValueModel
                        {
                            Id = tag.TagValue.Tag.Id,
                            Name = tag.TagValue.Tag.Name,
                            ValueName = tag.TagValue.Value,
                            ValueId = tag.TagValue.Id
                        });
                    }
                }
            }

            if (copyById.HasValue)
            {
                Model.Id = null;
                Model.Transactions.ForEach(t => t.Id = null);
            }
        }
        else
        {
            AddTransaction();
        }
    }

    private void AddTransaction()
    {
        var lastTransaction = Model.Transactions.LastOrDefault();

        if (lastTransaction is not null)
        {
            var copyOfLastTransaction = new TransactionModel
            {
                IssueDate = lastTransaction.IssueDate,
                DueDate = lastTransaction.DueDate,
                PaymentDate = lastTransaction.PaymentDate,
                Observation = lastTransaction.Observation,
                Value = lastTransaction.Value,
                IsEntry = lastTransaction.IsEntry,
                Status = lastTransaction.Status,
                Tags = new List<TagValueModel>(lastTransaction.Tags)
            };

            Model.Transactions.Add(copyOfLastTransaction);
        }
        else
        {
            var initialTransaction = new TransactionModel
            {
                IssueDate = DateOnly.FromDateTime(DateTime.Now),
                DueDate = DateOnly.FromDateTime(DateTime.Now),
                PaymentDate = DateOnly.FromDateTime(DateTime.Now),
                Observation = string.Empty,
                Value = 0,
                IsEntry = true,
                Status = (int)FinancialTransactionStatus.Pending,
                Tags = new List<TagValueModel>()
            };

            Model.Transactions.Add(initialTransaction);
        }
    }

    private async Task HandleValidSubmit()
    {
        FinancialTransactionBatch? batch = null;

        if (Model.Id.HasValue)
        {
            batch = await Db.FinancialTransactionBatches.SingleAsync(c => c.Id.Equals(Model.Id!.Value) && c.Profile.Id == Profile.Id);
        }

        if (batch is null)
        {
            batch = new FinancialTransactionBatch();
            batch.Profile = Profile;
        }    

        batch.Name = Model.Name;

        foreach (var transactionModel in Model.Transactions)
        {
            FinancialTransaction? transaction = null;

            if (transactionModel.Id.HasValue)
            {
                transaction = await Db.FinancialTransactions.Include(t => t.Tags).ThenInclude(t => t.TagValue)
                .SingleOrDefaultAsync(c => c.Id.Equals(transactionModel.Id.Value) && c.Batch.Id == batch.Id);
            }

            if (transaction is null)
            {
                transaction = new FinancialTransaction();
                transaction.Batch = batch;
                batch.Transactions.Add(transaction);
            }

            transaction.IssueDate = transactionModel.IssueDate;
            transaction.DueDate = transactionModel.DueDate;
            transaction.PaymentDate = transactionModel.PaymentDate;
            transaction.Observation = transactionModel.Observation;
            transaction.Value = transactionModel.Value;
            transaction.IsEntry = transactionModel.IsEntry;
            transaction.Status = (FinancialTransactionStatus)transactionModel.Status;

            foreach (var tagModel in transactionModel.Tags)
            {
                var tagValue = await Db.TagValues.Include(tv => tv.Tag).SingleAsync(tv => tv.Id == tagModel.ValueId);

                var existingTag = transaction.Tags.FirstOrDefault(t => t.TagValue.Id == tagValue.Id);
                if (existingTag is null)
                {
                    transaction.Tags.Add(new FinancialTransactionTag
                    {
                        FinancialTransaction = transaction,
                        Tag = tagValue.Tag,
                        TagValue = tagValue
                    });
                }
            }

            var removedTags = transaction.Tags
            .Where(t => t.Id > 0 && !transactionModel.Tags.Any(tm => tm.ValueId == t.TagValue.Id))
            .ToList();

            foreach (var removedTag in removedTags)
            {
                transaction.Tags.Remove(removedTag);
            }
        }

        var removedTransactions = batch.Transactions
        .Where(t => t.Id > 0 && !Model.Transactions.Any(mt => mt.Id.HasValue && mt.Id.Value == t.Id))
        .ToList();

        foreach (var removedTransaction in removedTransactions)
        {
            batch.Transactions.Remove(removedTransaction);
        }

        if (batch.Id > 0)
        {
            Db.FinancialTransactionBatches.Update(batch);
        }
        else
        {
            await Db.FinancialTransactionBatches.AddAsync(batch);
        }

        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo(PageToReturn);
    }

    private async Task DeleteEntity()
    {
        var batch = await Db.FinancialTransactionBatches.SingleAsync(c => c.Id.Equals(Model.Id!.Value));

        Db.FinancialTransactionBatches.Remove(batch);
        await Db.SaveChangesAsync();

        NavigationManager.NavigateTo(PageToReturn);
    }

    private void UpdateSelectedTags(ChangeEventArgs e, TransactionModel transactionModel, IEnumerable<TagValue> tagValues)
    {
        transactionModel.Tags.RemoveAll(tagModel => tagValues.Any(tv => tv.Id == tagModel.ValueId));

        int.TryParse(e.Value?.ToString(), out var selectedValue);
        if (selectedValue == 0) return;
        var tagValue = tagValues.FirstOrDefault(tv => tv.Id == selectedValue);
        if (tagValue is null) return;

        transactionModel.Tags.Add(new TagValueModel
        {
            Id = tagValue.Tag.Id,
            Name = tagValue.Tag.Name,
            ValueName = tagValue.Value,
            ValueId = tagValue.Id
        });
    }
}

<PageTitle>@PageTitle</PageTitle>

<h1 class="text-left my-4">@PageTitle</h1>

<EditForm Model="Model" OnValidSubmit="HandleValidSubmit" class="container-fluid mb-3">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <div class="col-12 col-md-8 col-lg-6">
            <label for="tr-name">Nome</label>
            <InputText id="tr-name" class="form-control" @bind-Value="Model.Name" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-8">
            <h2 class="text-left my-4">Pagamentos</h2>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Tipo</th>
                <th>Emitido em</th>
                <th>Status</th>
                <th>Observação</th>
                <th>Valor</th>
                <th>Vence em</th>
                <th>Pagamento em</th>
                @foreach (var tag in Tags)
                {
                    <th>@tag.Name</th>
                }
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Transactions)
            {
                <tr>
                    <td>
                        <strong>@(Model.Transactions.IndexOf(item) + 1)</strong>
                    </td>
                    <td>
                        <InputSelect class="form-control" @bind-Value="item.IsEntry">
                            <option value="true">Entrada</option>
                            <option value="false">Saída</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => item.IsEntry)" class="text-danger" />
                    </td>
                    <td>
                        <InputDate class="form-control" @bind-Value="item.IssueDate" />
                        <ValidationMessage For="@(() => item.IssueDate)" class="text-danger" />
                    </td>
                    <td>
                        <InputSelect class="form-control" @bind-Value="item.Status">
                            <option value="0">Pendente</option>
                            <option value="1">Pago</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => item.Status)" class="text-danger" />
                    </td>
                    <td>
                        <InputText class="form-control" @bind-Value="item.Observation" />
                        <ValidationMessage For="@(() => item.Observation)" class="text-danger" />
                    </td>
                    <td>
                        <InputNumber class="form-control" @bind-Value="item.Value" />
                        <ValidationMessage For="@(() => item.Value)" class="text-danger" />
                    </td>
                    <td>
                        <InputDate class="form-control" @bind-Value="item.DueDate" />
                        <ValidationMessage For="@(() => item.DueDate)" class="text-danger" />
                    </td>
                    <td>
                        <InputDate class="form-control" @bind-Value="item.PaymentDate" />
                        <ValidationMessage For="@(() => item.PaymentDate)" class="text-danger" />
                    </td>
                    @foreach (var tag in Tags)
                    {
                        <td>
                            <select id="tags" class="form-control" @onchange="(e) => UpdateSelectedTags(e, item, tag.Values)">
                                <option value="0">Selecione...</option>
                                @foreach (var tagValue in tag.Values.OrderBy(tv => tv.Value).ToList())
                                {
                                    <option value="@tagValue.Id" selected="@item.Tags.Any(p => p.ValueId == tagValue.Id)">
                                        @tagValue.Value</option>
                                }
                            </select>
                        </td>
                    }
                    <td>
                        <button type="button" class="btn btn-sm btn-danger"
                            @onclick="() => Model.Transactions.Remove(item)">
                            Remover
                        </button>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="@(8 + Tags.Count())">
                    <div class="d-flex justify-content-end">
                        <span>Total:</span>
                        <strong>@Model.Transactions.Sum(p => p.Value)</strong>
                    </div>
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="() => AddTransaction()">
                        Adicionar
                    </button>
                </td>
            </tr>
        </tfoot>
    </table>

    <div class="d-flex justify-content-between align-items-center my-4">
        @if (Model.Id.HasValue)
        {
            <button type="button" class="btn btn-danger" @onclick="DeleteEntity">
                Excluir
            </button>
        }
        <button type="submit" class="btn btn-primary">
            Salvar
        </button>
    </div>
</EditForm>