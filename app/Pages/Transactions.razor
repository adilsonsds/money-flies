@page "/transactions"
@using Microsoft.AspNetCore.WebUtilities
@using app.Data
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject NavigationManager NavigationManager

@code {
    private string selectedDateType = "payment";
    private DateTime? startDate;
    private DateTime? endDate;
    private List<int> selectedTagValueIds = new();
    private IEnumerable<FinancialTransactionPayment> transactionPayments = Array.Empty<FinancialTransactionPayment>();
    private IEnumerable<Tag> tags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        SetDefaultFilter();
        await LoadTransactions();
    }

    private async Task LoadTransactions()
    {
        var query = Db.FinancialTransactionPayments.Include(p => p.FinancialTransaction).AsQueryable();

        if (startDate.HasValue)
        {
            if (selectedDateType == "payment")
            {
                query = query.Where(p => p.Date >= DateOnly.FromDateTime(startDate.Value));
            }
            else
            {
                query = query.Where(p => p.FinancialTransaction.Date >= DateOnly.FromDateTime(startDate.Value));
            }
        }

        if (endDate.HasValue)
        {
            if (selectedDateType == "payment")
            {
                query = query.Where(p => p.Date <= DateOnly.FromDateTime(endDate.Value));
            }
            else
            {
                query = query.Where(p => p.FinancialTransaction.Date <= DateOnly.FromDateTime(endDate.Value));
            }
        }

        if (selectedTagValueIds.Any())
        {
            query = query.Where(p => p.FinancialTransaction.Tags.Any(t => selectedTagValueIds.Contains(t.TagValue.Id)));
        }

        if (selectedDateType == "payment")
        {
            query = query.OrderByDescending(p => p.Date).ThenByDescending(p => p.FinancialTransaction.Date);
        }
        else
        {
            query = query.OrderByDescending(p => p.FinancialTransaction.Date).ThenByDescending(p => p.Date);
        }

        transactionPayments = await query.ToListAsync();
    }

    private async Task ApplyFilter()
    {
        await LoadTransactions();
    }

    private void SetDefaultFilter()
    {
        var initialStartDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
        var initialEndDate = initialStartDate.AddMonths(1).AddSeconds(-1);

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("startDate", out var startDateValue))
        {
            DateTime.TryParse(startDateValue, out initialStartDate);
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("endDate", out var endDateValue))
        {
            DateTime.TryParse(endDateValue, out initialEndDate);
        }

        startDate = initialStartDate;
        endDate = initialEndDate;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tagValueId", out var tagValueIdValue))
        {
            if (int.TryParse(tagValueIdValue, out var tagValueId))
                selectedTagValueIds.Add(tagValueId);
        }

        tags = Db.Tags.Include(t => t.Values).ToList();
    }

    private async Task ResetFilter()
    {
        SetDefaultFilter();
        await LoadTransactions();
    }

    private void UpdateSelectedTags(ChangeEventArgs e, IEnumerable<TagValue> tagValues)
    {
        selectedTagValueIds.RemoveAll(id => tagValues.Any(tv => tv.Id == id));

        int.TryParse(e.Value?.ToString(), out var selectedValue);
        if (selectedValue == 0) return;
        selectedTagValueIds.Add(selectedValue);
    }
}

<PageTitle>Transações</PageTitle>

<h1>Transações</h1>

<div class="row mb-3">
    <div class="col-3">
        <label>Filtrar por</label>
        <select class="form-control" @bind="selectedDateType">
            <option value="registered">Data de registro</option>
            <option value="payment">Data de pagamento</option>
        </select>
    </div>
    <div class="col-3">
        <label>Data inicial</label>
        <InputDate class="form-control" @bind-Value="startDate" />
    </div>
    <div class="col-3">
        <label>Data final</label>
        <InputDate class="form-control" @bind-Value="endDate" />
    </div>
    @foreach (var tag in tags)
    {
        <div class="col-3">
            <label>@tag.Name</label>
            <select class="form-control" @onchange="(e) => UpdateSelectedTags(e, tag.Values)">
                <option value="0">Selecione...</option>
                @foreach (var tagValue in tag.Values.OrderBy(tv => tv.Value).ToList())
                {
                    <option value="@tagValue.Id" selected="@selectedTagValueIds.Contains(tagValue.Id)">@tagValue.Value</option>
                }
            </select>
        </div>
    }
    <div class="col-3 d-flex align-items-end justify-content-between">
        <button class="btn btn-secondary" @onclick="ResetFilter">Limpar Filtro</button>
        <button class="btn btn-primary" @onclick="ApplyFilter">Aplicar Filtro</button>
    </div>
</div>

<a href="/transactions/register" class="btn btn-primary">Nova transação</a>

@if (transactionPayments == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th class="col-2 text-center">Registrado em</th>
                <th class="col-2 text-center">Pagamento em</th>
                <th class="col-4 text-left">Descrição</th>
                <th class="col-1 text-center">Status</th>
                <th class="col-1" style="text-align: right;">Valor</th>
                <th class="col-2 text-center">Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionPayment in transactionPayments)
            {
                <tr>
                    <td class="text-center">
                        @transactionPayment.FinancialTransaction.Date.ToString("dd/MM")
                    </td>
                    <td class="text-center">
                        @transactionPayment.Date.ToString("dd/MM")
                    </td>
                    <td class="text-left">
                        <span>@transactionPayment.FinancialTransaction.Name</span>
                        @if (!string.IsNullOrEmpty(transactionPayment.Observation))
                        {
                            <br />
                            <small>@transactionPayment.Observation</small>
                        }
                    </td>
                    <td class="text-center">
                        @if (transactionPayment.Paid)
                        {
                            <span class="badge bg-success">Pago</span>
                        }
                        else
                        {
                            <span class="badge bg-warning">Pendente</span>
                        }
                    </td>
                    <td style="text-align: right;">
                        @transactionPayment.Value.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"))
                    </td>
                    <td class="text-center">
                        <a href="/transactions/register/@transactionPayment.FinancialTransaction.Id"
                            class="btn btn-secondary">Editar</a>
                        <a href="/transactions/register?copyBy=@transactionPayment.FinancialTransaction.Id"
                            class="btn btn-secondary">Clonar
                        </a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5" class="text-right">
                    @transactionPayments.Sum(t => t.Value)
                </td>
                <td></td>
            </tr>
        </tfoot>
    </table>
}
