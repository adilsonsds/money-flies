<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

@page "/transactions"
@using Microsoft.AspNetCore.WebUtilities
@using app.Data
@using app.Services
@using app.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db
@inject NavigationManager NavigationManager
@inject TransactionService TransactionService

@code {
    private TransactionFilter filter = new();

    private IEnumerable<FinancialTransactionPayment> transactionPayments = Array.Empty<FinancialTransactionPayment>();
    private IEnumerable<Tag> tags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        SetDefaultFilter();
        transactionPayments = await TransactionService.LoadTransactions(filter);
    }

    async Task ApplyFilter()
    {
        transactionPayments = await TransactionService.LoadTransactions(filter);
    }

    private void SetDefaultFilter()
    {
        var initialStartDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
        var initialEndDate = initialStartDate.AddMonths(1).AddSeconds(-1);

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("startDate", out var startDateValue))
        {
            DateTime.TryParse(startDateValue, out initialStartDate);
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("endDate", out var endDateValue))
        {
            DateTime.TryParse(endDateValue, out initialEndDate);
        }

        filter.StartDate = initialStartDate;
        filter.EndDate = initialEndDate;

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("tagValueId", out var tagValueIdValue))
        {
            if (int.TryParse(tagValueIdValue, out var tagValueId))
                filter.SelectedTagValueIds.Add(tagValueId);
        }

        tags = Db.Tags.Include(t => t.Values).ToList();
    }

    async Task ResetFilter()
    {
        SetDefaultFilter();
        transactionPayments = await TransactionService.LoadTransactions(filter);
    }

    private void UpdateSelectedTags(ChangeEventArgs e, IEnumerable<TagValue> tagValues)
    {
        filter.SelectedTagValueIds.RemoveAll(id => tagValues.Any(tv => tv.Id == id));

        int.TryParse(e.Value?.ToString(), out var selectedValue);
        if (selectedValue == 0) return;
        filter.SelectedTagValueIds.Add(selectedValue);
    }

    private async Task TogglePaymentStatus(FinancialTransactionPayment transactionPayment)
    {
        transactionPayment.Paid = !transactionPayment.Paid;
        await TransactionService.UpdateTransactionPaymentStatus(transactionPayment);
        transactionPayments = await TransactionService.LoadTransactions(filter);
    }
}

<PageTitle>Transações</PageTitle>

<h1>Transações</h1>

<div class="row mb-3">
    <div class="col-3">
        <label>Filtrar por</label>
        <select class="form-control" @bind="filter.SelectedDateType">
            <option value="registered">Data de registro</option>
            <option value="payment">Data de pagamento</option>
        </select>
    </div>
    <div class="col-3">
        <label>Data inicial</label>
        <InputDate class="form-control" @bind-Value="filter.StartDate" />
    </div>
    <div class="col-3">
        <label>Data final</label>
        <InputDate class="form-control" @bind-Value="filter.EndDate" />
    </div>
    @foreach (var tag in tags)
    {
        <div class="col-3">
            <label>@tag.Name</label>
            <select class="form-control" @onchange="(e) => UpdateSelectedTags(e, tag.Values)">
                <option value="0">Selecione...</option>
                @foreach (var tagValue in tag.Values.OrderBy(tv => tv.Value).ToList())
                {
                    <option value="@tagValue.Id" selected="@filter.SelectedTagValueIds.Contains(tagValue.Id)">@tagValue.Value
                    </option>
                }
            </select>
        </div>
    }
    <div class="col-3 d-flex align-items-end justify-content-between">
        <button class="btn btn-secondary" @onclick="ResetFilter">Limpar Filtro</button>
        <button class="btn btn-primary" @onclick="ApplyFilter">Aplicar Filtro</button>
    </div>
</div>

<a href="/transactions/register" class="btn btn-primary">Nova transação</a>

@if (transactionPayments == null)
{
    <p><em>Carregando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th class="col-2 text-center">Registrado em</th>
                <th class="col-4 text-left">Descrição</th>
                <th class="col-2 text-center">Pagamento em</th>
                <th class="col-1 text-center">Status</th>
                <th class="col-1" style="text-align: right;">Valor</th>
                <th class="col-2 text-center">Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionPayment in transactionPayments)
            {
                <tr>
                    <td class="text-center">
                        @transactionPayment.FinancialTransaction.Date.ToString("dd/MM")
                    </td>
                    <td class="text-left">
                        <span>@transactionPayment.FinancialTransaction.Name</span>

                        @if (!string.IsNullOrEmpty(transactionPayment.Observation))
                        {
                            <br />
                            <small>@transactionPayment.Observation</small>
                        }
                    </td>
                    <td class="text-center">
                        @transactionPayment.Date.ToString("dd/MM")
                    </td>
                    <td class="text-center">
                        <button class="btn p-0" @onclick="() => TogglePaymentStatus(transactionPayment)" title="Alterar Status">
                            @if (transactionPayment.Paid)
                            {
                                <i class="fa-solid fa-check text-success"></i> <!-- Ícone para "Pago" -->
                            }
                            else
                            {
                                <i class="fa-solid fa-circle-xmark text-warning"></i> <!-- Ícone para "Pendente" -->
                            }
                        </button>
                    </td>
                    <td style="text-align: right;">
                        @transactionPayment.Value.ToString("N2", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"))
                    </td>
                    <td class="text-center">
                        <a href="/transactions/register/@transactionPayment.FinancialTransaction.Id"
                            class="btn btn-secondary">Editar</a>
                        <a href="/transactions/register?copyBy=@transactionPayment.FinancialTransaction.Id"
                            class="btn btn-secondary">Clonar</a>
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5" style="text-align: right;">
                    @transactionPayments.Sum(t => t.Value).ToString("N2",
                    System.Globalization.CultureInfo.GetCultureInfo("pt-BR"))
            </td>
            <td></td>
        </tr>
    </tfoot>
</table>
}
